#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>

Mat imageOrig;
Mat imageRect;

Mat cameraMatrix,distCoeffs;
Size imageSize;
Mat map1, map2;


void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
	try
	{
	//Convert ROS image to OpenCV type mono8.
	 cv::imshow("view", cv_bridge::toCvShare(msg, "mono8")->image);
	}
	catch (cv_bridge::Exception& e)
	{
	 ROS_ERROR("Could not convert from '%s' to 'mono8'.", msg->encoding.c_str());
	}
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "image_listener");
	// Create ROS generic subscriber (or publisher)
	ros::NodeHandle nh; 

	// Create OpenCV display window
	cv::namedWindow("Undistorted Image");
	cv::startWindowThread();

	//Initialize ImageTransport instance with NodeHandle
	image_transport::ImageTransport it(nh);

	//Subscribe to the camera/image base topic. Call imageCallback when new image arrives, with a queue size of 1.
	image_transport::Subscriber sub=it.subscribe("camera/image_raw", 1,imageCallback);
	ros::spin();
	cv::destroyWindow("view");
}
